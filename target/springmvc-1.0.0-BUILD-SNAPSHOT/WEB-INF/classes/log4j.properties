#可以设置级别：DEBUG>INFO>WARN>ERROR>FATAL
#自定义样式
#%c 输出日志信息所属的类的全名 
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28 
#%f 输出日志信息所属的类的类名 
#%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行 
#%m 输出代码中指定的信息，如log(message)中的message 
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推 
#%r 输出自应用启动到输出该日志信息所耗费的毫秒数 
#%t 输出产生该日志事件的线程名

log4j.rootCategory=INFO,console,infoLog,warnLog
log4j.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p] %c%n%m%n%n

############输出到控制台
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=[dyl]${log4j.ConversionPattern}


############输出到文件
log4j.appender.infoLog=org.apache.log4j.DailyRollingFileAppender
log4j.appender.infoLog.File=${catalina.base}/logs/log4j/logInfo.log
log4j.appender.infoLog.DatePattern='.'yyyy-MM-dd
log4j.appender.infoLog.layout=org.apache.log4j.PatternLayout
log4j.appender.infoLog.layout.ConversionPattern=${log4j.ConversionPattern}

############警告级别以上的日志输出到文件
log4j.appender.warnLog=org.apache.log4j.DailyRollingFileAppender
log4j.appender.warnLog.File=${catalina.base}/logs/log4j/logWarn.log
log4j.appender.warnLog.DatePattern='.'yyyy-MM-dd
log4j.appender.warnLog.Threshold=WARN
log4j.appender.warnLog.layout=org.apache.log4j.PatternLayout
log4j.appender.warnLog.layout.ConversionPattern=${log4j.ConversionPattern}

#访问路径url记录
log4j.logger.dyl.common.filter.CommonFilter=DEBUG,FILE1
log4j.addivity.org.apache=false  
log4j.appender.FILE1=org.apache.log4j.RollingFileAppender  
log4j.appender.FILE1.File=${catalina.base}/logs/log4j/urlInfo.log 
log4j.appender.FILE1.layout=org.apache.log4j.PatternLayout  
log4j.appender.FILE1.MaxFileSize=50MB
log4j.appender.FILE1.MaxBackupIndex=20
log4j.appender.FILE1.layout.ConversionPattern=%m%n


log4j.logger.org.springframework.jdbc.core.JdbcTemplate=INFO




